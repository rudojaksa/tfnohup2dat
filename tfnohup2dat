#!/usr/bin/perl
# Copyleft: R.Jaksa 2019, GNU General Public License version 3

our    $PACKAGE = "tfnohup2dat";
our    $VERSION = "0.2";
our $SUBVERSION = "a";
our   $COPYLEFT = "(c) R.Jaksa 2019,2020 GPLv3";

our    $PKGNAME = "tfnohup2dat-0.2a";
our     $PKGMSG = "tfnohup2dat-0.2a (c) R.Jaksa 2019,2020 GPLv3";
our   $PKGBUILT = "built 20200317.2343 on brix";
our    $PKGLONG = "tfnohup2dat-0.2a (c) R.Jaksa 2019,2020 GPLv3 (built 20200317.2343 on brix)";

our   $MAKEDATE = "20200317.2343";
our   $MAKEHOST = "brix";
our    $MAKEDIR = "~/prj/mlutils/tfnohup2dat";
our    $MAKECPU = "Intel Core i5-6200U (2.30GHz)";
# colors-0.1c (c) R.Jaksa 2008,2019, GPLv3
# built: ~/prj/libraries/colors/colors.pl
# installed: /map/colors/pl/colors.pl

our $CR_="\033[31m"; # color red
our $CG_="\033[32m"; # color green
our $CY_="\033[33m"; # color yellow
our $CB_="\033[34m"; # color blue
our $CM_="\033[35m"; # color magenta
our $CC_="\033[36m"; # color cyan
our $CW_="\033[37m"; # color white
our $CK_="\033[90m"; # color black
our $CP_="\033[91m"; # color pink
our $CL_="\033[92m"; # color lime
our $CS_="\033[93m"; # color sulphur yellow
our $CZ_="\033[94m"; # color azure
our $CO_="\033[95m"; # color orchid
our $CA_="\033[96m"; # color aqua cyan
our $CF_="\033[97m"; # color fluorescent white
our $CD_="\033[0m";  # color default

# return length of string without escape sequences
our sub esclen {
  my $s = shift;
  $s =~ s/\033\[[0-9]+m//g;
  return length $s; }
# corelib-0.1 (c) R.Jaksa 2012,2019, GPLv3
# built: ~/prj/libraries/corelib/corelib.pl
# installed: /map/corelib/pl/corelib.pl

{

# inar(\@a,$s) - check whether the string is in the array
our sub inar {
  my $a = shift; # array ref
  my $s = shift; # string
  foreach(@{$a}) { return 1 if $_ eq $s; }
  return 0; }

# pushq(\@a,$s) - push unique, only if not there
our sub pushq {
  my $a = shift; # array ref
  my $s = shift; # string
  return if inar $a,$s;
  push @{$a},$s; }

# pushacp(\@a,\@a2) - make copy of a2 and push ref to it
our sub pushacp {
  my $a  = shift;	# target array ref
  my @a2 = @{shift()};	# copy of array
  push @{$a},\@a2; }

}
# helplib-0.2 (c) R.Jaksa 2015,2019, GPLv3
# built: ~/prj/libraries/helplib/helplib.pl
# installed: /map/helplib/pl/helplib.pl

{

our sub printhelp {
  my $help = shift;
  my $colors = "CWRDKGM";

  my $L = "\#\#\>";	# private  left brace
  my $R = "\<\#\#";	# private right brace
  my %STR;		# private substitutions content strings
  my $id = 0;		# last ID
  sub SBS { return "$L$_[0]$R"; } # return complete private substitution identifier

  # skip commented-out lines
  $help =~ s/(\n\#.*)*\n/\n/g;

  # add version/copyright section
  my $built = " $CK_($PKGBUILT)$CD_" if $SUBVERSION ne "none";
  $help .= "VERSION\n";
  $help .= "    $PKGMSG$built\n\n";

  # escapes
  $help =~ s/\\\)/SBS "brc2"/eg;	# escaped bracket

  ### PARSER ###

  # CC(text)
  $X{cc} = "cc";
  my $RE1 = qr/(\((([^()]|(?-3))*)\))/x; # () group, $1=withparens, $2=without
  $STR{$id++}=$4 while $help =~ s/([^A-Z0-9])(C[$colors])$RE1/$1.SBS("c$2$id")/e;

  # options lists
  $STR{$id++}=$2 while $help =~ s/(\n[ ]*)(-[a-zA-Z0-9]+(\[?[ =][A-Z]{2,}(x[A-Z]{2,})?\]?)?)([ \t])/$1.SBS("op$id").$5/e;

  # bracketed uppercase words
  $STR{$id++}="$1$2" while $help =~ s/\[([+-])?([A-Z]+)\]/SBS "br$id"/e;

  # plain uppercase words, like sections headers
  $STR{$id++}=$2 while $help =~ s/(\n|[ \t])(([A-Z_\/-]+[ ]?){4,})/$1.SBS("pl$id")/e;

  ### PROCESSOR ###

  # re-substitute
  $help =~ s/${L}pl([0-9]+)$R/$CC_$STR{$1}$CD_/g;
  $help =~ s/${L}op([0-9]+)$R/$CC_$STR{$1}$CD_/g;
  $help =~ s/${L}br([0-9]+)$R/\[$CC_$STR{$1}$CD_\]/g;

  # CC(text)
  my %cc; $cc{$_} = ${C.$_._} for split //,$colors;
  $help =~ s/${L}cC([$colors])([0-9]+)$R/$cc{$1}$STR{$2}$CD_/g;

  # escapes
  $help =~ s/${L}brc2$R/)/g;

  ### POSTPROCESSOR ###

  # star bullets
  $help =~ s/\n    \* /\n    $CC_\*$CD_ /g;

  print $help; }

}

$HELP=<<EOF;

NAME
    tfnohup2dat - extract data from the tensorflow nohup log

USAGE
    CK(nohup python tf-script.py &)
    tfnohup2dat [OPTIONS] nohup.out > loss.dat
    tfnohup2dat [OPTIONS] -a nohup.out
    tf-script.py | tfnohup2dat

DESCRIPTION
    It extracts the sample number, loss, accuracy, etc. from the TensorFlow
    standard progress report, as stored by nohup.

    Compressed input files file.gz, file.lz, or .zst are also accepted.

OPTIONS
     -h  This help.
     -v  Verbose messaging.
     -a  Automatic output file(s) file.dat (file-N.dat).  Multiple-files
         output for the multi-run nohup.out is possible in this mode.
     -r  Print raw input with non-ASCII characters removed.

EOF

# -----------------------------------------------------------------------------

# key/value verbose message
our sub verbose { print STDERR "$CC_$_[0]:$CD_ $_[1]$CD_\n" if $VERBOSE; }

# -----------------------------------------------------------------------------

for(@ARGV) { if($_ eq "-h") { printhelp $HELP; exit 0; }}
for(@ARGV) { if($_ eq "-v") { $VERBOSE=1; $_=""; last; }}
for(@ARGV) { if($_ eq "-a") { $AUTO=1; $_=""; last; }}
for(@ARGV) { if($_ eq "-r") { $RAW=1; $_=""; last; }}

our $FILE;
for(@ARGV) {
  next if $_ eq "";
  if(-f $_) { $FILE=$_; $_=""; last; }}
verbose "input",$FILE if $FILE;

# -----------------------------------------------------------------------------

our $STREAM = 1 if not defined $FILE;
our $EPOCHS;
our $EPOCH = 0;
our $STEPS;
our $STEP = 1;
our $PAT = 0;

# ------------------------------------------------------------- OUTPUT HANDLING
my @OUT;	# output array
my $NOUT = 0;	# number of outputs
##my $OUTPUT;	# filehandle

sub newoutput {
  return if not $AUTO;
  my $new = $FILE;
  $new =~ s/\..*?$//;
  $new = "nohup" if $new eq "";

  # define the output filename
  if($NOUT==0) {
    $new .= ".dat"; }
  elsif($NOUT==1) {
    verbose "rename","$new.dat -> $new-1.dat";
    system "mv $new.dat $new-1.dat";
    $new .= "-2.dat"; }
  else {
    $new .= "-".($NOUT+1).".dat"; }
  verbose "output",$new;

  # close/open the file
  close(OUTPUT) if $NOUT!=0;
  if(not open OUTPUT,">$new") {
    print STDERR "${CR_}Can't create file \"$new\" ($!).$CD_\n";
    exit 1; }

  $NOUT++; }

# emit data line into file or STDOUT
sub output {
  my $line = $_[0];
  if($AUTO) {
    print OUTPUT "$line\n"; }
  else {
    print "$line\n"; }}

# ---------------------------------------------------------------------- HEADER
our $HASHDR;
our @HDR;

sub hdr2str {
  my $s = "#pat";
  $s .= " $_" for @HDR;
  return $s; }

# -----------------------------------------------------------------------------
my $RE1 = qr(Epoch ([0-9]+)\/([0-9]+));
my $RE2 = qr(^\h*([0-9]+)\/([0-9]+).*? loss: [0-9\.]+);

# parse the line
sub parseline {
  my $line = $_[0];

  $line =~ s/\033\[[0-9]+m//g;	# remove colors escapes
  $line =~ s/[^ -~]//g;		# remove everything out of ASCII range = control chars

  # raw output
  if($RAW) {
    print "$line\n";
    next; }

  # new epoch
  if($line =~ /$RE1/) {
    $EPOCHS = $2 if not defined $EPOCHS;
    if($1==1 and $EPOCH>0) { # start of new training section
      $HASHDR = 0;
      @HDR = (); }
    $EPOCH = $1-1;
    # print STDERR "$line (epoch: $EPOCH)\n";
    next; }

  # data line
  elsif($line =~ /$RE2/) {
    $STEPS = $2; # should not change however
    $STEP = $1;
    $PAT = $EPOCH*$STEPS + $STEP;

    # get keys header
    if(!$HASHDR) {
      my $l = $line;
      my @hdr;
      while($l =~ s/([a-zA-Z0-9_]+): [0-9\.]+//) {
	my $k = $1;
	next if $k eq "ETA";
	push @hdr,$k; }
      push @HDR,$_ for @hdr;
      push @HDR,"val_$_" for @hdr;
      newoutput;
      output hdr2str;
      $HASHDR = 1; }

    # get values
    my %val = ();
    for my $k (@HDR) {
      $val{$k} = $1 if $line =~ / $k: ([0-9\.e-]*)/; }

    # defaults
    for my $k (@HDR) {
      $val{$k} = NaN if not defined $val{$k}; }

    # print
    my $s = "$PAT";
      $s .= " $val{$_}" for @HDR;
    output $s; }}

# -----------------------------------------------------------------------------

# streaming
if($STREAM) {
  while(<STDIN>) {
    for my $line (split /[\n\r]+/,$_) { # we have to further split the <> by \r
      parseline $line; }}}

# loop through all lines of input file
else {
  my $s;
  if($FILE =~ /\.zst$/)	   { $s = `zstdcat $FILE`; }
  elsif($FILE =~ /\.lz$/)  { $s = `lzip -c -d $FILE`; }
  elsif($FILE =~ /\.gz$/)  { $s = `zcat $FILE`; }
  else			   { $s = `cat $FILE`; }
  for my $line (split /[\n\r]+/,$s) {
    parseline $line; }}

close(OUTPUT) if $AUTO;

# -----------------------------------------------------------------------------
